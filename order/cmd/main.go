package main

import (
	"context"
	"errors"
	"log"
	"net"
	"net/http"
	"os"
	"os/signal"
	"sync"
	"syscall"
	"time"

	"github.com/go-chi/chi/v5"
	"github.com/go-chi/chi/v5/middleware"
	"github.com/google/uuid"
	"google.golang.org/grpc"
	"google.golang.org/grpc/credentials/insecure"

	orderV1 "github.com/germangorelkin/example-go-services/shared/pkg/openapi/order/v1"
	inventoryV1 "github.com/germangorelkin/example-go-services/shared/pkg/proto/inventory/v1"
	paymentV1 "github.com/germangorelkin/example-go-services/shared/pkg/proto/payment/v1"
)

var ErrOrderNotFound = errors.New("order not found")

const (
	httpPort = "9090"
	// –¢–∞–π–º–∞—É—Ç—ã –¥–ª—è HTTP-—Å–µ—Ä–≤–µ—Ä–∞
	readHeaderTimeout = 5 * time.Second
	shutdownTimeout   = 10 * time.Second
)

type Order struct {
	OrderUUID       string   `json:"order_uuid"`
	UserUUID        string   `json:"user_uuid"`
	PartUuids       []string `json:"part_uuids"`
	TotalPrice      float64  `json:"total_price"`
	TransactionUUID *string  `json:"transaction_uuid"`
	PaymentMethod   *string  `json:"payment_method"`
	Status          string   `json:"status"`
}

// OrderStorage –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –ø–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–∫–∞–∑–∞—Ö
type OrderStorage struct {
	mu   sync.RWMutex
	data map[string]Order
}

// NewOrderStorage —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–∫–∞–∑–∞—Ö
func NewOrderStorage() *OrderStorage {
	return &OrderStorage{
		data: make(map[string]Order),
	}
}

// Get
func (s *OrderStorage) Get(uuid string) (Order, error) {
	s.mu.RLock()
	defer s.mu.RUnlock()

	order, exists := s.data[uuid]
	if !exists {
		return order, ErrOrderNotFound
	}
	return order, nil
}

// Set
func (s *OrderStorage) Set(order Order) {
	s.mu.Lock()
	defer s.mu.Unlock()
	s.data[order.OrderUUID] = order
}

// OrderHandler —Ä–µ–∞–ª–∏–∑—É–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å orderV1.Handler –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API –ø–æ–≥–æ–¥—ã
type OrderHandler struct {
	storage           *OrderStorage
	inventroryService inventoryV1.InventoryServiceClient
	paymentService    paymentV1.PaymentServiceClient
}

// NewOrderHandler —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API
func NewOrderHandler(storage *OrderStorage) *OrderHandler {
	return &OrderHandler{
		storage:           storage,
		inventroryService: newInventoryService(),
		paymentService:    newPaymentService(),
	}
}

func newInventoryService() inventoryV1.InventoryServiceClient {
	conn, err := grpc.NewClient(
		"localhost:50051",
		grpc.WithTransportCredentials(insecure.NewCredentials()),
	)
	if err != nil {
		log.Panicf("failed to connect: %v\n", err)
	}

	return inventoryV1.NewInventoryServiceClient(conn)
}

func newPaymentService() paymentV1.PaymentServiceClient {
	conn, err := grpc.NewClient(
		"localhost:50052",
		grpc.WithTransportCredentials(insecure.NewCredentials()),
	)
	if err != nil {
		log.Panicf("failed to connect: %v\n", err)
	}

	return paymentV1.NewPaymentServiceClient(conn)
}

// CreateOrder –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞
func (h *OrderHandler) CreateOrder(ctx context.Context, req *orderV1.CreateOrderRequest) (orderV1.CreateOrderRes, error) {
	// –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
	if req.UserUUID == "" || len(req.PartUuids) == 0 {
		return &orderV1.BadRequestError{
			Code:    http.StatusBadRequest,
			Message: "user_uuid –∏ part_uuids –Ω–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏",
		}, nil
	}

	// –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
	order := Order{
		OrderUUID: uuid.NewString(),
		UserUUID:  req.UserUUID,
		PartUuids: append([]string{}, req.PartUuids...),
		Status:    "PENDING_PAYMENT",
	}

	// –≤—ã–∑–æ–≤ inventory
	parts, err := h.inventroryService.ListParts(context.Background(), &inventoryV1.ListPartsRequest{
		Filter: &inventoryV1.PartsFilter{
			Uuids: order.PartUuids,
		},
	})
	if err != nil {
		log.Printf("failed to ListParts:%v", err)
		return &orderV1.InternalServerError{}, nil
	}
	// check parts
	if len(parts.Parts) != len(order.PartUuids) {
		return &orderV1.BadRequestError{}, nil
	}

	// calc total price
	for _, part := range parts.GetParts() {
		order.TotalPrice += part.Price
	}

	// save
	h.storage.Set(order)

	// –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
	return &orderV1.CreateOrderResponse{
		OrderUUID:  order.OrderUUID,
		TotalPrice: order.TotalPrice,
	}, nil
}

// –ü—Ä–æ–≤–æ–¥–∏—Ç –æ–ø–ª–∞—Ç—É —Ä–∞–Ω–µ–µ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞.
func (h *OrderHandler) PayOrder(ctx context.Context, req *orderV1.PayOrderRequest, params orderV1.PayOrderParams) (orderV1.PayOrderRes, error) {
	order, err := h.storage.Get(params.OrderUUID)
	if err != nil {
		return &orderV1.NotFoundError{}, nil
	}

	// –≤—ã–∑–æ–≤ payment
	payment := &paymentV1.PayOrderRequest{
		OrderUuid:     order.OrderUUID,
		UserUuid:      order.UserUUID,
		PaymentMethod: 1,
	}
	tx, err := h.paymentService.PayOrder(context.Background(), payment)
	if err != nil {
		log.Printf("failed to PayOrder:%v", err)
		return &orderV1.InternalServerError{}, nil
	}

	// set payment info
	paymentMethod := "1"
	order.TransactionUUID = &tx.TransactionUuid
	order.PaymentMethod = &paymentMethod
	order.Status = "PAID"

	// update order
	h.storage.Set(order)

	// –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç (–ø—É—Å—Ç–æ–π –≤ –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ)
	return &orderV1.PayOrderResponse{TransactionUUID: *order.TransactionUUID}, nil
}

func (h *OrderHandler) GetOrderByUuid(ctx context.Context, params orderV1.GetOrderByUuidParams) (orderV1.GetOrderByUuidRes, error) {
	order, err := h.storage.Get(params.OrderUUID)
	if err != nil {
		return &orderV1.NotFoundError{}, nil
	}

	return &orderV1.GetOrderResponse{
		OrderUUID:       uuid.MustParse(order.OrderUUID),
		UserUUID:        uuid.MustParse(order.UserUUID),
		PartUuids:       []uuid.UUID{},
		TotalPrice:      0,
		TransactionUUID: orderV1.NewOptNilUUID(uuid.MustParse(*order.TransactionUUID)),
		PaymentMethod:   orderV1.NewOptNilGetOrderResponsePaymentMethod(orderV1.GetOrderResponsePaymentMethodCARD),
		Status:          "",
	}, nil
}

func (h *OrderHandler) CancelOrder(ctx context.Context, params orderV1.CancelOrderParams) (orderV1.CancelOrderRes, error) {
	order, err := h.storage.Get(params.OrderUUID)
	if err != nil {
		return &orderV1.NotFoundError{}, nil
	}

	// –∑–∞–∫–∞–∑ —É–∂–µ –æ–ø–ª–∞—á–µ–Ω –∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–º–µ–Ω—ë–Ω
	if order.Status == "PAID" {
		return &orderV1.ConflictError{}, nil
	}

	// change status
	order.Status = "CANCELLED"

	// save order
	h.storage.Set(order)

	return &orderV1.CancelOrderNoContent{}, nil
}

func main() {
	// –°–æ–∑–¥–∞–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ
	storage := NewOrderStorage()

	// –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ API –ø–æ–≥–æ–¥—ã
	orderHandler := NewOrderHandler(storage)

	// –°–æ–∑–¥–∞–µ–º OpenAPI —Å–µ—Ä–≤–µ—Ä
	orderServer, err := orderV1.NewServer(orderHandler)
	if err != nil {
		log.Fatalf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞ OpenAPI: %v", err)
	}

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä Chi
	r := chi.NewRouter()

	// –î–æ–±–∞–≤–ª—è–µ–º middleware
	r.Use(middleware.Logger)
	r.Use(middleware.Recoverer)
	r.Use(middleware.Timeout(10 * time.Second))

	// –ú–æ–Ω—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ OpenAPI
	r.Mount("/", orderServer)

	// –ó–∞–ø—É—Å–∫–∞–µ–º HTTP-—Å–µ—Ä–≤–µ—Ä
	server := &http.Server{
		Addr:              net.JoinHostPort("localhost", httpPort),
		Handler:           r,
		ReadHeaderTimeout: readHeaderTimeout, // –ó–∞—â–∏—Ç–∞ –æ—Ç Slowloris –∞—Ç–∞–∫ - —Ç–∏–ø DDoS-–∞—Ç–∞–∫–∏, –ø—Ä–∏ –∫–æ—Ç–æ—Ä–æ–π
		// –∞—Ç–∞–∫—É—é—â–∏–π —É–º—ã—à–ª–µ–Ω–Ω–æ –º–µ–¥–ª–µ–Ω–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç HTTP-–∑–∞–≥–æ–ª–æ–≤–∫–∏, —É–¥–µ—Ä–∂–∏–≤–∞—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –æ—Ç–∫—Ä—ã—Ç—ã–º–∏ –∏ –∏—Å—Ç–æ—â–∞—è
		// –ø—É–ª –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ. ReadHeaderTimeout –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ,
		// –µ—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –Ω–µ —É—Å–ø–µ–ª –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞ –æ—Ç–≤–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è.
	}

	// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –≥–æ—Ä—É—Ç–∏–Ω–µ
	go func() {
		log.Printf("üöÄ HTTP-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É %s\n", httpPort)
		err = server.ListenAndServe()
		if err != nil && !errors.Is(err, http.ErrServerClosed) {
			log.Printf("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: %v\n", err)
		}
	}()

	// Graceful shutdown
	quit := make(chan os.Signal, 1)
	signal.Notify(quit, syscall.SIGINT, syscall.SIGTERM)
	<-quit

	log.Println("üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞...")

	// –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å —Ç–∞–π–º–∞—É—Ç–æ–º –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞
	ctx, cancel := context.WithTimeout(context.Background(), shutdownTimeout)
	defer cancel()

	err = server.Shutdown(ctx)
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Å–µ—Ä–≤–µ—Ä–∞: %v\n", err)
	}

	log.Println("‚úÖ –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
}
